// =================== PO Spreadsheet Script ===================

// ----- Menu setup -----
function onOpen() {
  const ui = SpreadsheetApp.getUi();

  // Menu 1: Inbound (Import / Convert / Validate)
  ui.createMenu('Inbound')
    // Conversion
    .addItem('--- üîÑ Conversion ---', 'doNothing')
    .addItem('Extract Menards POs from PDF', 'extractMenardsShippingData')
    .addItem('Extract WCS POs from PDF', 'extractWCSData')
    .addItem('Amazon Order Import', 'importPSAmazonAnyTxt')
    .addItem('Dig Defence Import', 'digDefence')
    .addItem("Home Depot Import", 'importHomeDepotNeworders')
    .addItem("Lowe's Import", 'importLowesNeworders')
    .addItem("Sam's Import", 'convertSamsExcelToCSVAndImport')
    // Validation
    .addItem('--- ‚úÖ Validation ---', 'doNothing')
    .addItem('Apply Weight to Column L', 'applyWeightFormula')
    .addItem('Fix Zip Codes in Column H', 'fixZipCodes')
    .addItem('Check Lowes/Home Depot Limits', 'checkLowesHomeDepotLimits')
    .addToUi();

  // Menu 2: Outbound (Export / Combine)
  ui.createMenu('Outbound')
    .addItem('--- üì¶ Amazon ---', 'doNothing')
    .addItem('Export Amazon', 'exportPSAmazon')
    .addItem('Export Amazon Thurs', 'exportPSAmazonThurs')
    .addItem('Export Amazon Sun', 'exportPSAmazonSun')
    .addItem('--- üê∂ Dig Defence ---', 'doNothing')
    .addItem('Export To: document-PS-dd', 'document_PS_dd')
    .addItem('Export To: document-PS-dd-thurs', 'document_PS_dd_thurs')
    .addItem('Export To: document-PS-dd-sun', 'document_PS_dd_sun')
    .addItem('--- üè† Home Depot ---', 'doNothing')
    .addItem('Export To: document-PS-homedepot', 'exportPSHomeDepot')
    .addItem('Export To: document-PS-homedepot-thurs', 'exportPSHomeDepotThurs')
    .addItem('Export To: document-PS-homedepot-sun', 'exportPSHomeDepotSun')
    .addItem('--- üè¨ Lowes ---', 'doNothing')
    .addItem('Export To: document-PS-lowes', 'exportPSLowes')
    .addItem('Export To: document-PS-lowes-thurs', 'exportPSLowesThurs')
    .addItem('Export To: document-PS-lowes-sun', 'exportPSLowesSun')
    .addItem('--- üè¢ Menards ---', 'doNothing')
    .addItem('Export To: document-PS-menards', 'exportPSMenards')
    .addItem('Export To: document-PS-menards-thurs', 'exportPSMenardsThurs')
    .addItem('Export To: document-PS-menards-sun', 'exportPSMenardsSun')
    .addItem('--- üõí Sams ---', 'doNothing')
    .addItem('Export To: document-PS-sams', 'exportPSSams')
    .addItem('Export To: document-PS-sams-thurs', 'exportPSSamsThurs')
    .addItem('Export To: document-PS-sams-sun', 'exportPSSamsSun')
    .addItem('--- üåê WCS ---', 'doNothing')
    .addItem('Export To: document-PS-wcs', 'exportPSWCS')
    .addItem('Export To: document-PS-wcs-thurs', 'exportPSWCSThurs')
    .addItem('Export To: document-PS-wcs-sun', 'exportPSWCSSun')
    .addItem('--- üîó Combine CSVs ---', 'doNothing')
    .addItem('Combine Daily CSV Files (document-PS-combined)', 'combineCSVFiles')
    .addItem('Combine Weekend CSV Files (document-PS-combined-sun)', 'combineSundayCSVFiles')
    .addToUi();

  // Menu 3: Clean Up
  ui.createMenu('Clean Up')
    .addItem('--- üßπ Maintenance ---', 'doNothing')
    .addItem('Reset Formatting', 'resetFormatting')
    .addItem('Delete Sheet', 'clearSheet')
    .addItem('Purge Downloads', 'purgeFiles')
    .addItem('Purge Exports', 'purgeExportedCSVs')
    .addToUi();
}

// placeholder no-op used as label in menu
function doNothing() {}


// =============================================================
// ============ MENARDS & WCS PDF EXTRACTION ===================
// =============================================================

// ----- MENARDS CONFIG & FUNCTIONS -----
const CONFIG = {
  FOLDER_ID: '1NH19Eiq_Kc5uAEmdijSkuNdYIJYClHCU',
  SHEET_ID: '18S8eTH-OLVJwJSS7fZo6UD6Ut2TAtSSMDCFtHxDZahY',
  SHEET_NAME: 'Sheet1',
  SKU_MAP: {
    '2-4':   { internalSKU: 'DD2083204',  weight: 8.5 },
    '2-10':  { internalSKU: 'DD2083210',  weight: 20 },
    '2-25':  { internalSKU: 'DD2083225',  weight: 49 },
    '3-4':   { internalSKU: 'DD3103204',  weight: 8.8 },
    '3-10':  { internalSKU: 'DD3103210',  weight: 20.4 },
    '3-25':  { internalSKU: 'DD3103225',  weight: 49.8 },
    'XL-2':  { internalSKU: 'DDXL152402', weight: 7.6 },
    'XL-5':  { internalSKU: 'DDXL152405', weight: 18 },
    'XL-15': { internalSKU: 'DDXL152415', weight: 52.5 },
  },
};

function extractMenardsShippingData() {
  const sheet = SpreadsheetApp.openById(CONFIG.SHEET_ID).getSheetByName(CONFIG.SHEET_NAME);
  sheet.clear();
  const headers = ['PKG_PACKAGE_ID', 'SHPTO_NAME', 'SHPTO_ADDRESS_1', 'SHPTO_ADDRESS_2', 'SHPTO_ADDRESS_3','SHPTO_CITY', 'SHPTO_STATE_PROV', 'SHPTO_POSTAL_CODE', 'SHPTO_COUNTRY_ID', 'PKG_TELEPHONE','PKG_SERVICE_TYPE', 'PKG_WEIGHT_ACTUAL', 'PKG_CUSTOM1', 'PKG_CUSTOM2', 'PKG_CUSTOM3','PKG_CUSTOM4', 'PKG_CUSTOM5', 'SHPTO_RESIDENTIAL', 'UOL_SOURCE', 'SHPTO_ATTN_LINE','SHPTO_COMPANY', 'MERCHANT_ID'];
  sheet.appendRow(headers);
  const folder = DriveApp.getFolderById(CONFIG.FOLDER_ID);
  const files = folder.getFilesByType(MimeType.PDF);
  let processedCount = 0;
  while (files.hasNext()) {
    const file = files.next();
    const poNumber = file.getName().replace(/\.pdf$/i, '');
    let ocrFileId = null;
    try {
      const text = getOcrText_(file);
      ocrFileId = text.tempDocId;
      const shipToData = parseShipToBlock_(text.content);
      const lineItems = parseLineItems_(text.content);
      if (lineItems.length === 0) throw new Error('No line items could be parsed from the PDF.');
      // --- In your extractMenardsShippingData function ---

     for (const item of lineItems) {
        
        // --- THIS IS THE LINE TO CHANGE ---
        const rowData = [
          poNumber, shipToData.name, shipToData.address, '', '', shipToData.city, shipToData.state, shipToData.postal, 'US', shipToData.phone,
          'STANDARD', item.weight, item.internalSku, poNumber, shipToData.customerName, shipToData.storeNum, item.quantity, 'N', '', shipToData.name, shipToData.name, 'menards'
        ];
        // ----------------------------------

        sheet.appendRow(rowData);
      }
      processedCount++;
    } catch (e) {
      Logger.log(`Error processing ${file.getName()}: ${e.message}`);
      sheet.appendRow([poNumber, `ERROR: ${e.message}`]);
    } finally {
      if (ocrFileId) Drive.Files.remove(ocrFileId);
    }
  }
  Logger.log(`‚úÖ Extracted shipping info from ${processedCount} PDF(s).`);
}

// ----- WCS CONFIG & FUNCTIONS -----
const CONFIG_WCS = {
  FOLDER_ID: '1yzEmFqG-T50m1sao1-f0rzGzH5sXGwc6',
  SHEET_ID: '18S8eTH-OLVJwJSS7fZo6UD6Ut2TAtSSMDCFtHxDZahY',
  SHEET_NAME: 'Sheet1',
  SKU_MAP: {
    'DDAC-Tool-C': { internalSKU: 'DDAC-TOOL',  weight: 19.9 },
  },
};

function extractWCSData() {
  const sheet = SpreadsheetApp.openById(CONFIG_WCS.SHEET_ID).getSheetByName(CONFIG_WCS.SHEET_NAME) || SpreadsheetApp.openById(CONFIG_WCS.SHEET_ID).insertSheet(CONFIG_WCS.SHEET_NAME);
  sheet.clear();
  const headers = ['PKG_PACKAGE_ID', 'SHPTO_NAME', 'SHPTO_ADDRESS_1', 'SHPTO_ADDRESS_2', 'SHPTO_ADDRESS_3','SHPTO_CITY', 'SHPTO_STATE_PROV', 'SHPTO_POSTAL_CODE', 'SHPTO_COUNTRY_ID', 'PKG_TELEPHONE','PKG_SERVICE_TYPE', 'PKG_WEIGHT_ACTUAL', 'PKG_CUSTOM1', 'PKG_CUSTOM2', 'PKG_CUSTOM3','PKG_CUSTOM4', 'PKG_CUSTOM5', 'SHPTO_RESIDENTIAL', 'UOL_SOURCE', 'SHPTO_ATTN_LINE','SHPTO_COMPANY', 'MERCHANT_ID'];
  sheet.appendRow(headers);
  const folder = DriveApp.getFolderById(CONFIG_WCS.FOLDER_ID);
  const files = folder.getFilesByType(MimeType.PDF);
  let processedCount = 0;
  while (files.hasNext()) {
    const file = files.next();
    let ocrFileId = null;
    try {
      const text = getOcrText_(file); 
      ocrFileId = text.tempDocId;
      const poNumberMatch = text.content.match(/PO #\s*(\w+)/);
      const poNumber = poNumberMatch ? poNumberMatch[1] : `NO_PO_FOUND_IN_${file.getName()}`;
      const shipToData = parseWCSShipToBlock_(text.content);
      const lineItems = parseWCSLineItems_(text.content);
      if (lineItems.length === 0) throw new Error('No line items could be parsed.');
      for (const item of lineItems) {
        const rowData = [poNumber, shipToData.name, shipToData.address1, shipToData.address2, '', shipToData.city, shipToData.state, shipToData.postal, 'US', shipToData.phone,'STANDARD', item.weight, item.internalSku, poNumber, '', poNumber, item.quantity, 'Y', '', shipToData.name, shipToData.company, 'wcs'];
        sheet.appendRow(rowData);
      }
      processedCount++;
    } catch (e) {
      Logger.log(`Error processing ${file.getName()}: ${e.message}`);
      sheet.appendRow([file.getName(), `ERROR: ${e.message}`]);
    } finally {
      if (ocrFileId) Drive.Files.remove(ocrFileId);
    }
  }
  Logger.log(`‚úÖ Extracted shipping info from ${processedCount} WCS PDF(s).`);
}

// ----- SHARED & HELPER FUNCTIONS FOR PDF EXTRACTION -----
function getOcrText_(file) {
  const resource = { title: `temp-ocr-${file.getName()}`, mimeType: MimeType.GOOGLE_DOCS };
  let ocrFile;
  for (let i = 0; i < 3; i++) {
    try {
      ocrFile = Drive.Files.create(resource, file.getBlob(), { ocr: true });
      break;
    } catch (e) {
      Logger.log(`API call failed on attempt ${i + 1}. Retrying in 2 seconds. Error: ${e.message}`);
      if (i === 2) throw e;
      Utilities.sleep(2000);
    }
  }
  const doc = DocumentApp.openById(ocrFile.id);
  const text = doc.getBody().getText();
  return { content: text, tempDocId: ocrFile.id };
}

/**
 * Parses the OCR text to extract shipping, customer, and store info.
 * @param {string} text The full OCR text from the PDF.
 * @return {object} An object containing the parsed data.
 */
function parseShipToBlock_(text) {
  
  // 1. Initialize the data object with all the new fields
  const data = { 
    name: '', 
    address: '', 
    city: '', 
    state: '', 
    postal: '', 
    phone: '', 
    storeNum: '', 
    customerName: '' 
  };

  // 2. --- Find the Store Number ---
  // Looks for "Bill To:" followed by a number
  const storeMatch = text.match(/Bill To:\s*(\d+)/i);
  if (storeMatch && storeMatch[1]) {
    data.storeNum = storeMatch[1].trim(); // e.g., "3268"
  }

  // 3. --- Find the Customer Name ---
  // Looks for "Guest Information:" followed by a name on the next line
  const guestMatch = text.match(/Guest Information:\s*\n\s*([^\n]+)/i);
  if (guestMatch && guestMatch[1]) {
    data.customerName = guestMatch[1].trim(); // e.g., "Dunham, Carl"
  }

  // 4. --- Original "Ship To" Block Parsing Logic ---
  // (This is your original code, it remains unchanged)
  const match = text.match(/Ship To:\s*([\s\S]*?)(?=Guest Information:|Bill To:)/i);

  if (match && match[1]) {
    const lines = match[1].split('\n').map(line => line.trim()).filter(Boolean);
    const cszIndex = lines.findIndex(line => /,\s*[A-Z]{2}\s*\d{5}/.test(line));
    const phoneIndex = lines.findIndex(line => /Phone:/.test(line));
    const nameLine = lines.find((line, index) => {
      return index !== cszIndex && index !== phoneIndex && /^[A-Z\s]+$/i.test(line) && !/^\d{4}$/.test(line);
    });
    data.name = nameLine || '';
    if (cszIndex !== -1) {
      const cszMatch = lines[cszIndex].match(/(.+?),\s*([A-Z]{2})\s*(\d{5}(?:-\d{4})?)/);
      if (cszMatch) {
        let potentialCityAndAddress = cszMatch[1].trim();
        data.state = cszMatch[2].trim();
        data.postal = cszMatch[3].trim();
        if (/\d/.test(potentialCityAndAddress) && data.name) {
          const parts = potentialCityAndAddress.split(new RegExp(`\\s+${data.name}$`, 'i'));
          data.address = parts[0].trim();
          data.city = data.name;
        } else {
          data.city = potentialCityAndAddress;
        }
      }
    }
    if (phoneIndex !== -1) {
      const phoneMatch = lines[phoneIndex].match(/Phone:\s*([\d-]+)/i);
      if(phoneMatch) data.phone = phoneMatch[1].trim();
    }
    if (!data.address) {
      const addressLine = lines.find(line => /\d/.test(line) && !line.includes(data.postal) && !/Phone:/.test(line) && !/^\d{4}$/.test(line));
      if(addressLine) data.address = addressLine;
    }
  }
  
  // 5. Return the complete data object
  return data;
}
function parseLineItems_(text) {
  const items = [];
  const itemRegex = /1002485\s+DIGDE001 Special Order\s+(\d+)\s+[\d,.]+\s+Package\s+[\d,.]+\s+Vendor Part #:\s*([\w-]+)/g;
  let match;
  while ((match = itemRegex.exec(text)) !== null) {
    const quantity = match[1].trim();
    const vendorSku = match[2].trim();
    const mappedSku = CONFIG.SKU_MAP[vendorSku] || { internalSKU: `NOT_FOUND: ${vendorSku}`, weight: '' };
    items.push({vendorSku: vendorSku, quantity: quantity, internalSku: mappedSku.internalSKU, weight: mappedSku.weight});
  }
  return items;
}

function parseWCSShipToBlock_(text) {
  const data = { name: '', company: '', address1: '', address2: '', city: '', state: '', postal: '', phone: '' };
  const shipToMatch = text.match(/Prepared By:[\s\S]*?\n([\s\S]*?)(?=Memo|Customer Phone|Item Code)/);
  if (shipToMatch && shipToMatch[1]) {
    const lines = shipToMatch[1].split('\n').map(l => l.trim()).filter(Boolean);
    const phoneMatch = text.match(/Customer Phone\s*([\d\(\)\s-]+)/);
    if(phoneMatch) data.phone = phoneMatch[1].trim();
    const cszLine = lines.find(l => /[A-Z]{2}\s+\d{5}/.test(l));
    if (cszLine) {
      const cszMatch = cszLine.match(/(.+?)\s+([A-Z]{2})\s+(\d{5}(?:-\d{4})?)/);
      if (cszMatch) {
          data.city = cszMatch[1].trim();
          data.state = cszMatch[2].trim();
          data.postal = cszMatch[3].trim();
      }
    }
    const addressLines = lines.filter(l => l !== cszLine && l !== 'United States');
    data.name = addressLines.shift() || '';
    if (addressLines.length > 0 && !/^\d/.test(addressLines[0]) && !/rd|st|ln|blvd|rd/i.test(addressLines[0])) {
      data.company = addressLines.shift() || '';
    }
    data.address1 = addressLines.shift() || '';
    data.address2 = addressLines.join(' '); 
  }
  return data;
}

function parseWCSLineItems_(text) {
  const items = [];
  const itemCodeBlockMatch = text.match(/Item Code\s*([\s\S]*?)\s*Quantity/);
  const quantityBlockMatch = text.match(/Quantity\s*([\s\S]*?)\s*Description/);
  if (itemCodeBlockMatch && quantityBlockMatch) {
    const itemCodes = itemCodeBlockMatch[1].match(/(DDAC-Tool-C|Shipping-PO Drop)/g) || [];
    const quantities = quantityBlockMatch[1].split('\n').map(l => l.trim()).filter(Boolean);
    if (itemCodes.length > 0 && itemCodes.length === quantities.length) {
      for (let i = 0; i < itemCodes.length; i++) {
        const itemCode = itemCodes[i];
        const quantity = quantities[i];
        if (itemCode === 'Shipping-PO Drop') continue;
        const mappedSku = CONFIG_WCS.SKU_MAP[itemCode] || { internalSKU: `NOT_FOUND: ${itemCode}`, weight: '' };
        items.push({itemCode: itemCode, quantity: quantity, internalSku: mappedSku.internalSKU, weight: mappedSku.weight});
      }
    }
  }
  return items;
}


// =============================================================
// ================ ORIGINAL SCRIPT FUNCTIONS ==================
// =============================================================

// === IMPORTS & CONVERSIONS ===
function digDefence() {
  const folderId = '1xJJA6uJlSEJC2s9spfn0ShWwWCx3v4Qi'; 
  const spreadsheetId = '18S8eTH-OLVJwJSS7fZo6UD6Ut2TAtSSMDCFtHxDZahY';
  const targetSheetName = 'Sheet1';
  const folder = DriveApp.getFolderById(folderId);
  const files = folder.getFilesByType(MimeType.CSV);
  if (!files.hasNext()) {
    SpreadsheetApp.getUi().alert('‚ùå No CSV file found in the Dig Defence folder.');
    return;
  }
  const ss = SpreadsheetApp.openById(spreadsheetId);
  const sheet = ss.getSheetByName(targetSheetName);
  if (!sheet) {
    SpreadsheetApp.getUi().alert(`‚ùå Sheet "${targetSheetName}" not found.`);
    return;
  }
  const file = files.next();
  const csvData = Utilities.parseCsv(file.getBlob().getDataAsString());
  if (csvData.length === 0) {
    SpreadsheetApp.getUi().alert(`‚ùå CSV file "${file.getName()}" is empty.`);
    return;
  }
  sheet.clearContents();
  sheet.getRange(1, 1, csvData.length, csvData[0].length).setValues(csvData);
  SpreadsheetApp.getUi().alert(`‚úÖ Imported "${file.getName()}" into "${targetSheetName}".`);
}

function importPSAmazonAnyTxt() {
  const folderId = '1D67NuVHGp9ESn9BIwsUiGPr10-531J8O';
  const ssId = '18S8eTH-OLVJwJSS7fZo6UD6Ut2TAtSSMDCFtHxDZahY';
  const targetSheetName = 'Sheet1';
  let folder;
  try {
    folder = DriveApp.getFolderById(folderId);
  } catch (err) {
    SpreadsheetApp.getUi().alert('‚ùå Invalid Amazon folder ID or inaccessible folder.');
    return;
  }
  const files = folder.getFiles();
  let txtFile = null;
  while (files.hasNext()) {
    const f = files.next();
    if (f.getName().toLowerCase().endsWith('.txt')) {
      txtFile = f;
      break;
    }
  }
  if (!txtFile) {
    SpreadsheetApp.getUi().alert('‚ùå No .txt file found in Amazon folder.');
    return;
  }
  const blob = txtFile.getBlob();
  const txtContent = blob.getDataAsString();
  const lines = txtContent.trim().split(/\r?\n/);
  if (lines.length < 2) {
    SpreadsheetApp.getUi().alert('‚ùå File appears empty or invalid.');
    return;
  }
  const rows = lines.map(line => line.split('\t'));
  const ss = SpreadsheetApp.openById(ssId);
  const sheet = ss.getSheetByName(targetSheetName);
  if (!sheet) {
    SpreadsheetApp.getUi().alert(`‚ùå Sheet "${targetSheetName}" not found.`);
    return;
  }
  sheet.clearContents();
  const targetHeaders = ["PKG_PACKAGE_ID","SHPTO_NAME","SHPTO_ADDRESS_1","SHPTO_ADDRESS_2","SHPTO_ADDRESS_3","SHPTO_CITY","SHPTO_STATE_PROV","SHPTO_POSTAL_CODE","SHPTO_COUNTRY_ID","SHPTO_TELEPHONE","PKG_SERVICE_TYPE","PKG_WEIGHT_ACTUAL","PKG_CUSTOM1","PKG_CUSTOM2","PKG_CUSTOM3","PKG_CUSTOM4","PKG_CUSTOM5","SHPTO_RESIDENTIAL","UOL_SOURCE","SHPTO_ATTN_LINE","SHPTO_COMPANY","MERCHANT_ID"];
  sheet.getRange(1, 1, 1, targetHeaders.length).setValues([targetHeaders]);
  const dataRows = rows.slice(1);
  const colMapping = [[0, 0], [1, 13], [8, 1], [10, 9], [11, 12], [13, 16], [18, 2], [19, 3], [20, 4], [21, 5], [22, 6], [23, 7], [24, 8]];
  const output = dataRows.map(row => {
    let newRow = new Array(targetHeaders.length).fill('');
    colMapping.forEach(([src, dest]) => { newRow[dest] = row[src] || ''; });
    newRow[21] = "Amazon";
    return newRow;
  });
  if (output.length > 0) {
    sheet.getRange(2, 1, output.length, targetHeaders.length).setValues(output);
  }
  SpreadsheetApp.getUi().alert(`‚úÖ Amazon import complete from "${txtFile.getName()}". Rows imported: ${output.length}.`);
}

function importNewordersFromFolder(folderId, spreadsheetId, sheetName) {
  const folder = DriveApp.getFolderById(folderId);
  const files = folder.getFiles();
  let processedCount = 0;
  while (files.hasNext()) {
    const file = files.next();
    if (file.getName().toLowerCase().endsWith('.neworders')) {
      const newName = file.getName().replace(/\.neworders$/i, '.csv');
      const blob = file.getBlob().setName(newName);
      folder.createFile(blob);
      file.setTrashed(true);
      const ss = SpreadsheetApp.openById(spreadsheetId);
      const sheet = ss.getSheetByName(sheetName);
      if (!sheet) throw new Error(`Sheet "${sheetName}" not found.`);
      sheet.clearContents();
      const csvData = Utilities.parseCsv(blob.getDataAsString());
      if (csvData.length > 0) {
        sheet.getRange(1, 1, csvData.length, csvData[0].length).setValues(csvData);
      }
      processedCount++;
      break;
    }
  }
  SpreadsheetApp.getUi().alert(`‚úÖ ${processedCount} file(s) imported from folder ${folder.getName()}`);
}

function importLowesNeworders() {
  importNewordersFromFolder('1t3rEMKX3gtkXxmtcJegvPSmJlEsweNy9', '18S8eTH-OLVJwJSS7fZo6UD6Ut2TAtSSMDCFtHxDZahY', 'Sheet1');
}

function importHomeDepotNeworders() {
  importNewordersFromFolder('1wYO_YGXpvaIAnW0kDmrgRDUHiOmck0hX', '18S8eTH-OLVJwJSS7fZo6UD6Ut2TAtSSMDCFtHxDZahY', 'Sheet1');
}

function convertSamsExcelToCSVAndImport() {
  const folderId = '1HWtSvDcv_cdsYQqUzG3SwxKi-2DVcKqC';
  const spreadsheetId = '18S8eTH-OLVJwJSS7fZo6UD6Ut2TAtSSMDCFtHxDZahY';
  const targetSheetName = 'Sheet1';
  const orderFolder = DriveApp.getFolderById(folderId);
  let files = orderFolder.getFiles();
  let file = null;
  while (files.hasNext()) {
    let f = files.next();
    if (f.getName().toLowerCase().endsWith('.xlsx')) {
      file = f;
      break;
    }
  }
  if (!file) {
    SpreadsheetApp.getUi().alert(`No .xlsx file found in the folder.`);
    return;
  }
  const convertedSheetId = uploadExcelAsGoogleSheet_(file.getBlob(), 'TempImportFile');
  file.setTrashed(true);
  const sh = SpreadsheetApp.openById(convertedSheetId);
  const targetTab = pickDensestSheet_(sh);
  if (!targetTab) {
    DriveApp.getFileById(convertedSheetId).setTrashed(true);
    SpreadsheetApp.getUi().alert('‚ùå No sheets found in converted workbook.');
    return;
  }
  const csvBlob = exportSheetToCsvBlob_(convertedSheetId, targetTab.getSheetId(), file.getName().replace(/\.xlsx$/i, '.csv'));
  orderFolder.createFile(csvBlob);
  const targetSS = SpreadsheetApp.openById(spreadsheetId);
  const targetSheet = targetSS.getSheetByName(targetSheetName);
  if (!targetSheet) {
    SpreadsheetApp.getUi().alert(`‚ùå Target sheet "${targetSheetName}" not found.`);
    return;
  }
  importCsvBlobToSheet(csvBlob, targetSheet);
  DriveApp.getFileById(convertedSheetId).setTrashed(true);
  SpreadsheetApp.getUi().alert(`‚úÖ "${file.getName()}" converted to CSV (tab: "${targetTab.getName()}") and imported. Original Excel deleted.`);
}

function importCsvBlobToSheet(csvBlob, targetSheet) {
  const csvString = csvBlob.getDataAsString();
  const lines = csvString.split(/\r?\n/).filter(line => line.trim() !== '');
  const csvData = lines.map(line => Utilities.parseCsv(line)[0]);
  if (csvData.length === 0) return;
  const maxCols = Math.max(...csvData.map(r => r.length));
  const normalizedData = csvData.map(r => [...r, ...Array(maxCols - r.length).fill('')]);
  targetSheet.clearContents();
  const range = targetSheet.getRange(1, 1, normalizedData.length, maxCols);
  range.setNumberFormat('@');
  range.setValues(normalizedData);
}

function uploadExcelAsGoogleSheet_(blob, newName) {
  const token = ScriptApp.getOAuthToken();
  const boundary = '-------314159265358979323846';
  const metadata = { name: newName, mimeType: 'application/vnd.google-apps.spreadsheet' };
  const metaPart = `--${boundary}\r\nContent-Type: application/json; charset=UTF-8\r\n\r\n${JSON.stringify(metadata)}\r\n`;
  const filePartHeader = `--${boundary}\r\nContent-Type: ${blob.getContentType()}\r\n\r\n`;
  const closeDelim = `\r\n--${boundary}--`;
  const payload = Utilities.newBlob(metaPart).getBytes().concat(Utilities.newBlob(filePartHeader).getBytes()).concat(blob.getBytes()).concat(Utilities.newBlob(closeDelim).getBytes());
  const res = UrlFetchApp.fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart', { method: 'post', contentType: `multipart/related; boundary=${boundary}`, payload: payload, headers: { Authorization: `Bearer ${token}` }, muteHttpExceptions: true });
  const code = res.getResponseCode();
  if (code < 200 || code >= 300) throw new Error(`Drive upload failed (${code}): ${res.getContentText()}`);
  const json = JSON.parse(res.getContentText());
  if (!json.id) throw new Error('Drive upload succeeded but returned no file id.');
  return json.id;
}

function exportSheetToCsvBlob_(spreadsheetId, sheetGid, outName) {
  const token = ScriptApp.getOAuthToken();
  const url = `https://docs.google.com/spreadsheets/d/${encodeURIComponent(spreadsheetId)}/export?format=csv&gid=${encodeURIComponent(sheetGid)}`;
  const res = UrlFetchApp.fetch(url, { method: 'get', headers: { Authorization: `Bearer ${token}` }, muteHttpExceptions: true });
  const code = res.getResponseCode();
  if (code < 200 || code >= 300) throw new Error(`CSV export failed (${code}): ${res.getContentText()}`);
  const blob = res.getBlob(); blob.setName(outName || 'export.csv'); return blob;
}

function pickDensestSheet_(ss) {
  const sheets = ss.getSheets(); if (!sheets || !sheets.length) return null;
  let best = sheets[0]; let bestCount = -1;
  for (var i = 0; i < sheets.length; i++) {
    const sh = sheets[i]; const vals = sh.getDataRange().getValues(); let count = 0;
    for (var r = 0; r < vals.length; r++) for (var c = 0; c < vals[r].length; c++) if (vals[r][c] !== '' && vals[r][c] !== null) count++;
    if (count > bestCount) { bestCount = count; best = sh; }
  }
  return best;
}

// === VALIDATION & TOOLS ===
function applyWeightFormula() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const data = sheet.getRange("M2:M" + sheet.getLastRow()).getValues();
  const weightMap = {"DDXL152402": 7.6, "DDXL152405": 18, "DDXL152415": 52.5, "DD2083204": 8.5, "DD2083210": 20, "DD2083225": 49, "DD3103204": 8.8, "DD3103210": 20.4, "DD3103225": 49.8, "315471600": 7.6, "315471537": 18, "315471541": 52.5, "315471488": 8.5, "315471498": 20, "DD2083210-BL": 20.3, "DD2083225-BL": 49.3, "DDAC-TOOL": 19.9, "315471515": 49, "315471525": 8.8, "315471581": 20.4, "315471588": 49.8};
  const output = data.map(row => {
    const key = String(row[0]);
    return [weightMap.hasOwnProperty(key) ? weightMap[key] : 0];
  });
  sheet.getRange(2, 12, output.length, 1).setValues(output);
  SpreadsheetApp.getUi().alert('‚úÖ Weights applied to Column L.');
}

function fixZipCodes() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const lastRow = sheet.getLastRow();
  if (lastRow < 2) { SpreadsheetApp.getUi().alert('No rows to process.'); return; }
  const range = sheet.getRange(2, 8, lastRow - 1);
  const values = range.getValues();
  sheet.getRange(2, 8, lastRow - 1).setNumberFormat('@STRING@');
  const fixed = values.map(row => {
    let zip = row[0];
    if (zip !== "" && zip !== null && zip !== undefined) {
      zip = zip.toString().trim().padStart(5, '0');
      return [zip];
    }
    return [""];
  });
  range.setValues(fixed);
  SpreadsheetApp.getUi().alert('‚úÖ Zip codes are fixed!');
}

function checkLowesHomeDepotLimits() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheets = ss.getSheets();
  let alertMessages = [];
  sheets.forEach(sheet => {
    const lastRow = sheet.getLastRow();
    if (lastRow < 2) return;
    sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()).setBackground(null);
    const colL = sheet.getRange(2, 12, lastRow - 1, 1).getValues();
    const colQ = sheet.getRange(2, 17, lastRow - 1, 1).getValues();
    const colV = sheet.getRange(2, 22, lastRow - 1, 1).getValues();
    for (let i = 0; i < colL.length; i++) {
      const store = String(colV[i][0]).trim().toLowerCase();
      let maxRowWeight = null;
      if (store === 'lowes') maxRowWeight = 450;
      else if (store === 'thehomedepot') maxRowWeight = 500;
      else continue;
      const weight = Number(String(colL[i][0]).trim()) || 0;
      const packs = Number(String(colQ[i][0]).trim()) || 0;
      const rowTotalWeight = weight * packs;
      let rowAlerts = [];
      if (rowTotalWeight > maxRowWeight) rowAlerts.push(`weight (${rowTotalWeight} > ${maxRowWeight})`);
      if (packs > 25) rowAlerts.push(`packs (${packs} > 25)`);
      if (rowAlerts.length > 0) {
        alertMessages.push(`${sheet.getName()}: Row ${i + 2} exceeds ${rowAlerts.join(' and ')}`);
        sheet.getRange(i + 2, 1, 1, sheet.getLastColumn()).setBackground('#F8D7DA');
      }
    }
  });
  if (alertMessages.length > 0) SpreadsheetApp.getUi().alert('‚ö†Ô∏è Alerts:\n' + alertMessages.join('\n'));
  else SpreadsheetApp.getUi().alert('‚úÖ All Lowes and Home Depot rows are within limits.');
}

// === EXPORTS & COMBINERS ===
function exportActiveSheetToFolder(filename, folderId) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getActiveSheet();
  if (!sheet) {
    SpreadsheetApp.getUi().alert('‚ùå No active sheet selected.');
    return;
  }
  const csvContent = convertRangeToCsv(sheet);
  if (!csvContent.trim()) {
    SpreadsheetApp.getUi().alert('‚ùå The sheet is empty, nothing to export.');
    return;
  }
  const blob = Utilities.newBlob(csvContent, 'text/csv', filename);
  const folder = DriveApp.getFolderById(folderId);
  const existingFiles = folder.getFilesByName(filename);
  while (existingFiles.hasNext()) existingFiles.next().setTrashed(true);
  folder.createFile(blob);
  SpreadsheetApp.getUi().alert(`‚úÖ '${filename}' saved to Drive folder: ${folder.getName()}`);
}

function document_PS_dd() { exportActiveSheetToFolder('document-PS-dd.csv', '1P4RNXSlls4BJb2n7hvFUJxUSi_TX9O31'); }
function document_PS_dd_thurs() { exportActiveSheetToFolder('document-PS-dd-thurs.csv', '1P4RNXSlls4BJb2n7hvFUJxUSi_TX9O31'); }
function document_PS_dd_sun() { exportActiveSheetToFolder('document-PS-dd-sun.csv', '1P4RNXSlls4BJb2n7hvFUJxUSi_TX9O31'); }

function exportActiveSheetAsCSV(filename) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const csvContent = convertRangeToCsv(sheet);
  const blob = Utilities.newBlob(csvContent, "text/csv", filename);
  let mainFolder = DriveApp.getFoldersByName("PO Production").hasNext() ? DriveApp.getFoldersByName("PO Production").next() : DriveApp.createFolder("PO Production");
  let orderFilesFolder = mainFolder.getFoldersByName("Order Files").hasNext() ? mainFolder.getFoldersByName("Order Files").next() : mainFolder.createFolder("Order Files");
  const existingFiles = orderFilesFolder.getFilesByName(filename);
  while (existingFiles.hasNext()) existingFiles.next().setTrashed(true);
  orderFilesFolder.createFile(blob);
  SpreadsheetApp.getUi().alert(`üìÑ '${filename}' saved to Drive > PO Production > Order Files`);
}

function exportPSHomeDepot() { exportActiveSheetAsCSV('document-PS-homedepot.csv'); }
function exportPSLowes() { exportActiveSheetAsCSV('document-PS-lowes.csv'); }
function exportPSHomeDepotThurs() { exportActiveSheetAsCSV('document-PS-homedepot-thurs.csv'); }
function exportPSHomeDepotSun() { exportActiveSheetAsCSV('document-PS-homedepot-sun.csv'); }
function exportPSLowesThurs() { exportActiveSheetAsCSV('document-PS-lowes-thurs.csv'); }
function exportPSLowesSun() { exportActiveSheetAsCSV('document-PS-lowes-sun.csv'); }
function exportPSSams() { exportActiveSheetAsCSV('document-PS-sams.csv'); }
function exportPSSamsThurs() { exportActiveSheetAsCSV('document-PS-sams-thurs.csv'); }
function exportPSSamsSun() { exportActiveSheetAsCSV('document-PS-sams-sun.csv'); }
function exportPSAmazon() { exportActiveSheetAsCSV('document-PS-amazon.csv'); }
function exportPSAmazonThurs() { exportActiveSheetAsCSV('document-PS-amazon-thurs.csv'); }
function exportPSAmazonSun() { exportActiveSheetAsCSV('document-PS-amazon-sun.csv'); }

function exportActiveSheetToMenardsCSV(filename) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  if (!sheet) { SpreadsheetApp.getUi().alert('‚ùå Sheet1 not found.'); return; }
  const csvContent = convertRangeToCsv(sheet);
  if (!csvContent.trim()) { SpreadsheetApp.getUi().alert('‚ùå Sheet1 is empty.'); return; }
  const blob = Utilities.newBlob(csvContent, 'text/csv', filename);
  const menardsFolder = DriveApp.getFolderById('112KbyDBh1blWZaYIv3JPwTAs6zQ4gWGt');
  const existingMenardsFiles = menardsFolder.getFilesByName(filename);
  while (existingMenardsFiles.hasNext()) existingMenardsFiles.next().setTrashed(true);
  menardsFolder.createFile(blob);
  const exportsFolder = DriveApp.getFolderById('1P4RNXSlls4BJb2n7hvFUJxUSi_TX9O31');
  const existingExportsFiles = exportsFolder.getFilesByName(filename);
  while (existingExportsFiles.hasNext()) existingExportsFiles.next().setTrashed(true);
  exportsFolder.createFile(blob);
  SpreadsheetApp.getUi().alert(`‚úÖ '${filename}' exported to Menards folder AND PO Exports folder.`);
}

function exportPSMenards() { exportActiveSheetToMenardsCSV('document-PS-menards.csv'); }
function exportPSMenardsThurs() { exportActiveSheetToMenardsCSV('document-PS-menards-thurs.csv'); }
function exportPSMenardsSun() { exportActiveSheetToMenardsCSV('document-PS-menards-sun.csv'); }

function exportActiveSheetToTwoFolders(filename) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const csvContent = convertRangeToCsv(sheet);
  if (!csvContent.trim()) { SpreadsheetApp.getUi().alert('‚ùå Sheet is empty, nothing to export.'); return; }
  const blob = Utilities.newBlob(csvContent, 'text/csv', filename);
  const mainFolder = DriveApp.getFoldersByName("PO Production").hasNext() ? DriveApp.getFoldersByName("PO Production").next() : DriveApp.createFolder("PO Production");
  const orderFilesFolder = mainFolder.getFoldersByName("Order Files").hasNext() ? mainFolder.getFoldersByName("Order Files").next() : mainFolder.createFolder("Order Files");
  let existingFiles = orderFilesFolder.getFilesByName(filename);
  while (existingFiles.hasNext()) existingFiles.next().setTrashed(true);
  orderFilesFolder.createFile(blob);
  const wcsFolder = DriveApp.getFolderById('1VXUhZIpFGmAmBBAGt12gkxMZhbjIMilM');
  existingFiles = wcsFolder.getFilesByName(filename);
  while (existingFiles.hasNext()) existingFiles.next().setTrashed(true);
  wcsFolder.createFile(blob);
  SpreadsheetApp.getUi().alert(`‚úÖ '${filename}' exported to both PO Production > Order Files AND WCS folder.`);
}

function exportPSWCS() { exportActiveSheetToTwoFolders('document-PS-wcs.csv'); }
function exportPSWCSThurs() { exportActiveSheetToTwoFolders('document-PS-wcs-thurs.csv'); }
function exportPSWCSSun() { exportActiveSheetToTwoFolders('document-PS-wcs-sun.csv'); }

function convertRangeToCsv(sheet) {
  const data = sheet.getDataRange().getDisplayValues();
  return data.map(row => row.map(cell => {
    if (typeof cell === 'string' && (cell.includes(',') || cell.includes('"'))) {
      cell = '"' + cell.replace(/"/g, '""') + '"';
    }
    return cell;
  }).join(',')).join('\r\n');
}

// ========== UPDATED CSV COMBINING FUNCTIONS ==========
function combineCSVFiles() {
  combineCSVFilesCore([
    "document-PS-homedepot.csv",
    "document-PS-lowes.csv",
    "document-PS-amazon.csv",
    "document-PS-menards.csv",
    "document-PS-wcs.csv"
  ], "document-PS-combined.csv");
}

function combineSundayCSVFiles() {
  combineCSVFilesCore([
    "document-PS-homedepot-thurs.csv",
    "document-PS-homedepot-sun.csv",
    "document-PS-lowes-thurs.csv",
    "document-PS-lowes-sun.csv",
    "document-PS-amazon-thurs.csv",
    "document-PS-amazon-sun.csv",
    "document-PS-menards-thurs.csv",
    "document-PS-menards-sun.csv",
    "document-PS-wcs-thurs.csv",
    "document-PS-wcs-sun.csv"
  ], "document-PS-combined-sun.csv");
}
// =======================================================


function combineCSVFilesCore(allowedFilenames, outputFilename) {
  const mainFolder = DriveApp.getFoldersByName("PO Production").hasNext() ? DriveApp.getFoldersByName("PO Production").next() : null;
  if (!mainFolder) { SpreadsheetApp.getUi().alert('Folder "PO Production" not found!'); return; }
  const orderFilesFolder = mainFolder.getFoldersByName("Order Files").hasNext() ? mainFolder.getFoldersByName("Order Files").next() : null;
  if (!orderFilesFolder) { SpreadsheetApp.getUi().alert('Folder "Order Files" inside "PO Production" not found!'); return; }
  const files = orderFilesFolder.getFiles();
  let combinedLines = [];
  let headerSaved = false;
  while (files.hasNext()) {
    const file = files.next();
    if (!allowedFilenames.includes(file.getName())) continue;
    const lines = file.getBlob().getDataAsString().split(/\r?\n/);
    if (lines.length === 0) continue;
    if (!headerSaved) { combinedLines = combinedLines.concat(lines); headerSaved = true; }
    else { combinedLines = combinedLines.concat(lines.slice(1)); }
  }
  if (combinedLines.length === 0) { SpreadsheetApp.getUi().alert('No allowed CSV data found to combine!'); return; }
  while (combinedLines.length > 0 && combinedLines[combinedLines.length - 1].trim() === '') combinedLines.pop();
  let dataRows = combinedLines.map(line => line.split(','));
  const weightToSKU = {"19.9": "DDAC-TOOL", "2": "SPEED-TOOL", "8.2": "GP-1", "15.4": "GP-2", "30": "GP-4", "7.6": "DDXL152402", "18": "DDXL152405", "36": "DDXL152410", "52.5": "DDXL152415", "8.5": "DD2083204", "12": "DD2083206", "20": "DD2083210", "29.4": "DD2083215", "49": "DD2083225", "49.3": "DD2083225-BL", "8.8": "DD3103204", "20.4": "DD3103210", "49.8": "DD3103225", "69": "DDAC-10", "35": "DDAC-5", "20.3": "DD2083210-BL", "15": "DDAC-2"};
  for (let i = 1; i < dataRows.length; i++) {
    let weight = dataRows[i][11];
    if (weightToSKU.hasOwnProperty(weight)) dataRows[i][12] = weightToSKU[weight];
  }
  const combinedCSV = dataRows.map(row => row.map(cell => {
    if (cell.includes(',') || cell.includes('"')) return `"${cell.replace(/"/g, '""')}"`;
    return cell;
  }).join(',')).join('\r\n');
  const blob = Utilities.newBlob(combinedCSV, "text/csv", outputFilename);
  const existingFiles = orderFilesFolder.getFilesByName(outputFilename);
  while (existingFiles.hasNext()) existingFiles.next().setTrashed(true);
  orderFilesFolder.createFile(blob);
  SpreadsheetApp.getUi().alert(`‚úÖ Combined CSV "${outputFilename}" created in PO Production > Order Files with SKU column updated.`);
}


// === CLEAN UP & MAINTENANCE ===
function resetFormatting() {
  const ss = SpreadsheetApp.openById('18S8eTH-OLVJwJSS7fZo6UD6Ut2TAtSSMDCFtHxDZahY');
  const sheet = ss.getSheetByName('Sheet1');
  if (!sheet) return SpreadsheetApp.getUi().alert('‚ùå Sheet1 not found');
  sheet.setConditionalFormatRules([]);
  sheet.clearFormats();
  const range = sheet.getDataRange();
  range.setNumberFormat('@');
  range.setHorizontalAlignment('left');
  range.setVerticalAlignment('middle');
  range.setBorder(false, false, false, false, false, false);
  SpreadsheetApp.getUi().alert('‚úÖ Sheet formatting fully reset');
}

function clearSheet() {
  const ss = SpreadsheetApp.openById('18S8eTH-OLVJwJSS7fZo6UD6Ut2TAtSSMDCFtHxDZahY');
  const sheetName = 'Sheet1';
  const sheet = ss.getSheetByName(sheetName);
  if (!sheet) return SpreadsheetApp.getUi().alert('‚ùå The sheet was not found.');
  const tempSheet = ss.insertSheet('TempSheet');
  ss.deleteSheet(sheet);
  tempSheet.setName(sheetName);
  SpreadsheetApp.getUi().alert('‚úÖ Spreadsheet has been restored.');
}

function purgeExportedCSVs() {
  const folderId = '1P4RNXSlls4BJb2n7hvFUJxUSi_TX9O31';
  const folder = DriveApp.getFolderById(folderId);
  const files = folder.getFiles();
  let count = 0;
  while (files.hasNext()) {
    const file = files.next();
    if (file.getName().toLowerCase().endsWith('.csv')) {
      file.setTrashed(true);
      count++;
    }
  }
  SpreadsheetApp.getUi().alert(`üßπ ${count} CSV file(s) moved to trash from export folder.`);
}

function purgeFiles() {
  const folderIds = ['1D67NuVHGp9ESn9BIwsUiGPr10-531J8O', '1xJJA6uJlSEJC2s9spfn0ShWwWCx3v4Qi', '1wYO_YGXpvaIAnW0kDmrgRDUHiOmck0hX', '1t3rEMKX3gtkXxmtcJegvPSmJlEsweNy9', '1HWtSvDcv_cdsYQqUzG3SwxKi-2DVcKqC'];
  let totalDeleted = 0;
  folderIds.forEach(folderId => {
    const folder = DriveApp.getFolderById(folderId);
    const files = folder.getFiles();
    while (files.hasNext()) {
      const file = files.next();
      const name = file.getName().toLowerCase();
      if (name.endsWith('.csv') || name.endsWith('.txt') || name.endsWith('.xlsx')) {
        file.setTrashed(true);
        totalDeleted++;
      }
    }
  });
  SpreadsheetApp.getUi().alert(`‚úÖ Purge complete. Total files deleted: ${totalDeleted}`);
}
